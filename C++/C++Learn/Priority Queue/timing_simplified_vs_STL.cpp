#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>


// zero indexed priority queue using vector

constexpr inline std::size_t left_child (std::size_t index) {

    return (2 * index) + 1;
}

constexpr inline std::size_t right_child (std::size_t index) {

    return (2 * index) + 2;
}

constexpr inline std::size_t parent (std::size_t i) {

    if (i<0)
        return -1;
    return (i - 1) / 2;
}

template <typename VALUE>
void push_up_heap (std::vector<VALUE>& heap, std::size_t index) {

    while (parent(index) >= 0 && parent(index) < heap.size() && heap[parent(index)] > heap[index]) {
        VALUE temp;
        temp = heap[parent(index)];
        heap[parent(index)] = heap[index];
        heap[index] = temp;
        index = parent(index);
    }
}

template <typename VALUE>
void push_down_heap (std::vector<VALUE>& heap, std::size_t index, std::size_t ignore_elements = 0) {

    std::size_t focus;

    while (index < heap.size() - ignore_elements) {
        focus = index;
        if (left_child(index) < (heap.size() - ignore_elements) && heap[left_child(index)] < heap[focus])
            focus = left_child(index);
        if (right_child(index) < (heap.size() - ignore_elements) && heap[right_child(index)] < heap[focus])
            focus = right_child(index);
        if (focus == index)
            break;
        VALUE temp;
        temp = heap[focus];
        heap[focus] = heap[index];
        heap[index] = temp;
        index = focus;
    }
}

template <typename VALUE>
void decrease_key (std::vector<VALUE>& heap, std::size_t index, VALUE value) {

    if (value >= heap[index])
        return;

    heap[index] = value;
    push_up_heap (heap, index);
}

template <typename VALUE>
void increase_key (std::vector<VALUE>& heap, std::size_t index, VALUE value) {

    if (value <= heap[index])
        return;

    heap[index] = value;
    push_down_heap (heap, index);
}

template <typename VALUE>
void pop_binary_heap (std::vector<VALUE>& heap) {

    if (heap.size() <= 0)
        return;

    VALUE temp;
    temp = heap[0];
    heap[0] = heap[heap.size() - 1];
    heap[heap.size() - 1] = temp;

    push_down_heap (heap, 0, 1);
}

template <typename VALUE>
void make_binary_heap (std::vector<VALUE>& heap) {

    for (std::size_t i = 1; i < heap.size(); ++i) {
        push_up_heap (heap, i);
    }
}

int main() {
    std::chrono::steady_clock::time_point start;
    std::chrono::steady_clock::duration time;
    start = std::chrono::steady_clock::now();
    std::vector<long long int> pq1 = {4541,8464,1983,9564,637,450,7624,7651,7279,6438,785,2043,1531,7972,96,1572,7073,6125,7747,7232,5581,3100,3689,9716,620,236,178,7056,7935,554,997,659,814,4220,7025,8616,2543,7202,4805,5414,2023,9356,851,5639,2255,8381,658,822,5002,7390,6068,2111,3015,8710,5208,7266,3138,120,1249,232,3840,446,3126,4089,4475,2853,6171,3309,1978,5256,7487,8897,612,1553,632,829,8310,1390,3804,1172,3540,6193,2449,1243,9005,3018,8600,6365,4418,7784,2325,9070,8039,7294,7170,2799,299,995,485,337,2581,6349,4815,5022,2176,3838,3126,5108,5400,8079,2789,2739,8821,8476,6178,1114,6743,3569,2193,1917,8563,8036,6551,1705,7710,3298,1954,5739,4086,2206,8551,5982,2633,1063,4299,7747,1328,9482,7782,8326,9404,4536,6469,6078,773,7114,4063,3333,5135,2913,9915,3097,9005,4306,2448,2467,9130,1203,6364,6134,2662,1439,4329,4410,3357,4992,6285,1465,4783,3150,497,985,8075,2930,2068,6012,5885,7440,3825,1860,9418,7989,8526,587,1898,8029,518,2498,1525,2600,426,408,3873,8877,2067,4909,5083,2576,1179,4840,1971,9200,6381,406,3805,5972,6874,1636,597,8952,5166,1311,7779,7970,4850,1033,5487,6490,3251,8063,8759,1321,1458,2025,3823,3329,9693,9121,2776,6029,7759,808,580,8922,2532,1797,1929,2455,1007,5247,6212,5305,4239,5885,7504,5346,6847,8124,7975,2210,6813,6081,6567,2815,2382,416,2409,8833,1584,9340,4350,881,2096,2736,395,7764,4188,1021,4119,3410,187,645,1219,2619,9180,4904,6057,1452,4237,3212,4119,1870,9358,290,3630,305,8949,982,550,8055,4098,1912,6821,5971,4165,1033,1152,6404,9647,5224,4993,4253,7431,3134,665,3943,1806,5574,8311,5400,3413,7457,6938,1846,5485,7848,4964,7559,2510,6164,7423,1659,2813,9371,7380,684,2936,2075,6378,4148,5348,508,3804,5408,9657,6753,6159,3716,5915,1920,1010,6847,5293,5218,3238,7136,9009,9965,1296,7193,1715,1600,5996,6163,4215,1070,5092,483,4048,3742,6162,2763,9715,7026,4451,612,1082,1512,9260,1610,4525,4158,1073,8760,3630,7897,851,742,196,4038,5226,4064,9115,9970,7492,6089,5082,4248,1965,8608,437,5418,3311,8178,4851,5586,8235,6912,5987,4457,3625,5922,1563,9319,7293,7419,3313,92,3098,9823,8525,1518,1227,4643,9022,4388,9696,1813,7565,8499,6342,8844,5103,9687,9962,3248,382,9348,8335,4668,7018,5837,2862,179,1244,2325,5869,9649,6524,7908,9859,2932,8228,7276,9483,3179,9652,5004,3111,1709,4103,4069,2279,3821,2182,3404,971,3293,9611,6591,869,2017,2425,172,2674,6533,5930,7678,410,8353,1049,8952,2037,1084,1681,5767,3745,4463,981,7940,4802,2779,8050,8023,2937,1181,5874,2162,4985,2257,9522,3485,1061,406,7751,7949,1485,5137,2732,539,6395,4211,4734,6802,8793,4991,3244,6569,3478,9367,2425,818,2857,4486,1973,5313,8884,180,443,5825,7212,2085,4620,3012,4312,131,6907,1162,1513,4765,2442,8420,2249,3984,3797,9304,310,6757,2029,4376,17,9307,9625,2766,3618,3223,3192,8779,863,2313,8521,4689,8349,576,319,1581,662,3729,3871,3305,3227,1124,604,6720,8268,9439,4517,7508,7797,8183,829,1772,2107,9012,2123,3346,4456,9541,7171,845,8723,2388,5573,8857,7348,763,1252,2416,4790,5350,5450,3843,3662,5147,3674,7657,6619,3960,1542,2268,6254,7996,3346,927,3132,985,2296,7460,3761,920,6894,1822,2488,6829,4357,6099,9720,7068,9571,2164,8785,4157,9588,976,8104,9164,92,6869,2414,5940,1280,2104,8936,1852,6341,1896,1115,3810,9817,2142,6486,72,6257,7143,9588,4301,1539,6757,9234,6381,2805,4291,2142,2619,5989,2711,97,9662,282,6813,5407,2617,9579,8114,124,5104,4719,7086,7024,9384,8260,9766,302,2798,6676,4592,6562,2315,8309,4376,681,2518,6000,147,8998,9290,5493,1954,9746,5593,5580,3369,4451,3474,4047,6288,5121,4495,5366,9562,8165,7378,2963,3141,6674,5665,479,7073,2888,623,4229,8468,2646,685,7886,6205,8129,3265,1772,1415,9875,70,4842,9233,4117,9604,660,7964,3023,2002,4388,6436,2015,3544,396,3810,857,3866,9211,2610,2687,3362,8921,8353,9201,8556,9173,4057,2950,1417,1330,9775,2635,1436,5069,7756,8075,9881,2690,9372,8416,8223,1567,1012,6233,6947,7097,359,9132,5055,3630,4346,4718,2443,379,1014,8209,731,7023,7646,9821,9464,735,7218,5666,1124,779,9108,7405,9256,81,9321,9674,6224,1441,641,7576,1658,7969,7338,499,1050,9249,546,2382,7554,1122,3244,1327,3200,5042,6038,1439,904,4923,5432,402,5796,174,9647,596,7689,9001,7050,8965,8764,2225,8869,215,3365,2444,5268,3285,595,9725,4594,6486,4463,7573,7804,8466,9957,1592,6183,3444,5313,1663,9305,9297,4582,7900,7014,3544,1221,5059,6073,3946,7228,1350,518,8492,2765,1089,8941,6842,2128,3464,2226,2479,2251,3454,6187,562,3617,5944,7386,6115,42,6017,7996,3063,2466,6127,7809,4016,4739,5621,8636,6064,5463,1002,9373,5855,3864,4538,1885,8780,8251,5324,1530,5984,7774,8084,8628,4041,3725,9354,1303,4373,2987,6954,9402,6205,9662,2397,9911,9957,2604,6425,5724,561,9781,1508,3266,1465,6753,9022,9132,2192,8492,9376,4017,4498,6734,3615,9630,189,2288,2294,246,7777,3660,5203,2923,1482,7780,7312,4626,8414,790,8805,9825,8162,2351,7948,7916,818,9293,837,8913,5041,4841,6139,8017,157,9845,2263,6896,4710,5474,4452,3342,6064,6582,5394,3927,2680,3659,4079,5608,9380,283,1395,2163,3389,7803,1850,6933,6817,5430,4647,6501,2468,3452,8119,2512,8040,3898,7380,5171};
    make_binary_heap (pq1);
    pq1.push_back(1);
    push_up_heap(pq1, pq1.size()-1);
    time = std::chrono::steady_clock::now() - start;
    std::cout << "Time taken: " << std::chrono::duration_cast<std::chrono::microseconds>(time).count() << std::endl;
    
    start = std::chrono::steady_clock::now();
    std::vector<long long int> pq2 = {4541,8464,1983,9564,637,450,7624,7651,7279,6438,785,2043,1531,7972,96,1572,7073,6125,7747,7232,5581,3100,3689,9716,620,236,178,7056,7935,554,997,659,814,4220,7025,8616,2543,7202,4805,5414,2023,9356,851,5639,2255,8381,658,822,5002,7390,6068,2111,3015,8710,5208,7266,3138,120,1249,232,3840,446,3126,4089,4475,2853,6171,3309,1978,5256,7487,8897,612,1553,632,829,8310,1390,3804,1172,3540,6193,2449,1243,9005,3018,8600,6365,4418,7784,2325,9070,8039,7294,7170,2799,299,995,485,337,2581,6349,4815,5022,2176,3838,3126,5108,5400,8079,2789,2739,8821,8476,6178,1114,6743,3569,2193,1917,8563,8036,6551,1705,7710,3298,1954,5739,4086,2206,8551,5982,2633,1063,4299,7747,1328,9482,7782,8326,9404,4536,6469,6078,773,7114,4063,3333,5135,2913,9915,3097,9005,4306,2448,2467,9130,1203,6364,6134,2662,1439,4329,4410,3357,4992,6285,1465,4783,3150,497,985,8075,2930,2068,6012,5885,7440,3825,1860,9418,7989,8526,587,1898,8029,518,2498,1525,2600,426,408,3873,8877,2067,4909,5083,2576,1179,4840,1971,9200,6381,406,3805,5972,6874,1636,597,8952,5166,1311,7779,7970,4850,1033,5487,6490,3251,8063,8759,1321,1458,2025,3823,3329,9693,9121,2776,6029,7759,808,580,8922,2532,1797,1929,2455,1007,5247,6212,5305,4239,5885,7504,5346,6847,8124,7975,2210,6813,6081,6567,2815,2382,416,2409,8833,1584,9340,4350,881,2096,2736,395,7764,4188,1021,4119,3410,187,645,1219,2619,9180,4904,6057,1452,4237,3212,4119,1870,9358,290,3630,305,8949,982,550,8055,4098,1912,6821,5971,4165,1033,1152,6404,9647,5224,4993,4253,7431,3134,665,3943,1806,5574,8311,5400,3413,7457,6938,1846,5485,7848,4964,7559,2510,6164,7423,1659,2813,9371,7380,684,2936,2075,6378,4148,5348,508,3804,5408,9657,6753,6159,3716,5915,1920,1010,6847,5293,5218,3238,7136,9009,9965,1296,7193,1715,1600,5996,6163,4215,1070,5092,483,4048,3742,6162,2763,9715,7026,4451,612,1082,1512,9260,1610,4525,4158,1073,8760,3630,7897,851,742,196,4038,5226,4064,9115,9970,7492,6089,5082,4248,1965,8608,437,5418,3311,8178,4851,5586,8235,6912,5987,4457,3625,5922,1563,9319,7293,7419,3313,92,3098,9823,8525,1518,1227,4643,9022,4388,9696,1813,7565,8499,6342,8844,5103,9687,9962,3248,382,9348,8335,4668,7018,5837,2862,179,1244,2325,5869,9649,6524,7908,9859,2932,8228,7276,9483,3179,9652,5004,3111,1709,4103,4069,2279,3821,2182,3404,971,3293,9611,6591,869,2017,2425,172,2674,6533,5930,7678,410,8353,1049,8952,2037,1084,1681,5767,3745,4463,981,7940,4802,2779,8050,8023,2937,1181,5874,2162,4985,2257,9522,3485,1061,406,7751,7949,1485,5137,2732,539,6395,4211,4734,6802,8793,4991,3244,6569,3478,9367,2425,818,2857,4486,1973,5313,8884,180,443,5825,7212,2085,4620,3012,4312,131,6907,1162,1513,4765,2442,8420,2249,3984,3797,9304,310,6757,2029,4376,17,9307,9625,2766,3618,3223,3192,8779,863,2313,8521,4689,8349,576,319,1581,662,3729,3871,3305,3227,1124,604,6720,8268,9439,4517,7508,7797,8183,829,1772,2107,9012,2123,3346,4456,9541,7171,845,8723,2388,5573,8857,7348,763,1252,2416,4790,5350,5450,3843,3662,5147,3674,7657,6619,3960,1542,2268,6254,7996,3346,927,3132,985,2296,7460,3761,920,6894,1822,2488,6829,4357,6099,9720,7068,9571,2164,8785,4157,9588,976,8104,9164,92,6869,2414,5940,1280,2104,8936,1852,6341,1896,1115,3810,9817,2142,6486,72,6257,7143,9588,4301,1539,6757,9234,6381,2805,4291,2142,2619,5989,2711,97,9662,282,6813,5407,2617,9579,8114,124,5104,4719,7086,7024,9384,8260,9766,302,2798,6676,4592,6562,2315,8309,4376,681,2518,6000,147,8998,9290,5493,1954,9746,5593,5580,3369,4451,3474,4047,6288,5121,4495,5366,9562,8165,7378,2963,3141,6674,5665,479,7073,2888,623,4229,8468,2646,685,7886,6205,8129,3265,1772,1415,9875,70,4842,9233,4117,9604,660,7964,3023,2002,4388,6436,2015,3544,396,3810,857,3866,9211,2610,2687,3362,8921,8353,9201,8556,9173,4057,2950,1417,1330,9775,2635,1436,5069,7756,8075,9881,2690,9372,8416,8223,1567,1012,6233,6947,7097,359,9132,5055,3630,4346,4718,2443,379,1014,8209,731,7023,7646,9821,9464,735,7218,5666,1124,779,9108,7405,9256,81,9321,9674,6224,1441,641,7576,1658,7969,7338,499,1050,9249,546,2382,7554,1122,3244,1327,3200,5042,6038,1439,904,4923,5432,402,5796,174,9647,596,7689,9001,7050,8965,8764,2225,8869,215,3365,2444,5268,3285,595,9725,4594,6486,4463,7573,7804,8466,9957,1592,6183,3444,5313,1663,9305,9297,4582,7900,7014,3544,1221,5059,6073,3946,7228,1350,518,8492,2765,1089,8941,6842,2128,3464,2226,2479,2251,3454,6187,562,3617,5944,7386,6115,42,6017,7996,3063,2466,6127,7809,4016,4739,5621,8636,6064,5463,1002,9373,5855,3864,4538,1885,8780,8251,5324,1530,5984,7774,8084,8628,4041,3725,9354,1303,4373,2987,6954,9402,6205,9662,2397,9911,9957,2604,6425,5724,561,9781,1508,3266,1465,6753,9022,9132,2192,8492,9376,4017,4498,6734,3615,9630,189,2288,2294,246,7777,3660,5203,2923,1482,7780,7312,4626,8414,790,8805,9825,8162,2351,7948,7916,818,9293,837,8913,5041,4841,6139,8017,157,9845,2263,6896,4710,5474,4452,3342,6064,6582,5394,3927,2680,3659,4079,5608,9380,283,1395,2163,3389,7803,1850,6933,6817,5430,4647,6501,2468,3452,8119,2512,8040,3898,7380,5171};
    std::make_heap(pq2.begin(), pq2.end());
    pq2.push_back(1);
    std::push_heap(pq2.begin(), pq2.end());
    time = std::chrono::steady_clock::now() - start;
    std::cout << "Time taken: " << std::chrono::duration_cast<std::chrono::microseconds>(time).count() << std::endl;
    
    return 0;
}